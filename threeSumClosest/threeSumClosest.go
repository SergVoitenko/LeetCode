/*
Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.

Return the sum of the three integers.

You may assume that each input would have exactly one solution.

Example 1:

Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
Example 2:

Input: nums = [0,0,0], target = 1
Output: 0

Constraints:

3 <= nums.length <= 1000
-1000 <= nums[i] <= 1000
-104 <= target <= 104
*/
package main

import (
	//	"bufio"
	"fmt"
	"sort"
	//
	// "strings"
)

func main() {
	//	nums := []int{-651, 443, -113, 70, -305, -139, -982, 906, -296, -816, -213, -486, 584, 173, 862, 522, -654, -257, -762, -868, 428, -342, -720, 298, -323, 678, 951, -850, 541, -135, 841, -517, 763, 488, 544, -452, 34, 703, -898, -603, 736, 783, -767, 123, -90, -533, 197, 999, 343, 285, 349, -124, -561, 187, -941, -828, -408, 546, -69, 922, -483, -491, -500, 850, 301, -597, -643, -823, 75, 812, -418, 766, 772, 880, -159, 796, -709, -478, 919, -171, 575, -299, 718, -336, -650, 172, 658, -200, 267, 297, -550, 315, -976, 331, -669, -13, 935, 904, -367, 161, 83, -448, 101, -400, -430, -506, 138, -340, 934, 680, 918, 605, -834, -559, 65, 68, -677, 402, 580, 43, 705, -237, -45, -810, -311, 978, 230, -87, -758, -872, -642, 646, 866, 707, 611, -117, 795, 673, 556, 141, -666, 839, -49, 698, -60, -298, -129, 781, 147, -393, 876, 908, -17, -747, -477, 527, -325, -467, 979, 380, -48, 657, -843, -672, -978, 296, 405, 607, -378, 58, 470, 272, 289, -247, 322, -700, 471, 476, -58, -330, 192, -103, 860, -287, -294, 513, -244, -595, -288, -913, 536, -952, -818, -249, -975, 364, -338, 198, -241, -523, 180, -725, 388, -246, -638, 640, -167, -102, -313, 861, -156, -239, -889, 606, -699, -924, -781, 320, 189, -555, -352, -608, 523, 649, -180}
	//	target := -2549
	//nums := []int{-1, 2, 1, -4}
	//target := 1 // 2
	// nums := []int{-1, 0, 1, 2, -1, -4, 0, 0, 4}
	//	nums := []int{3, 0, -2, -1, 1, 2}
	// target := 7
	//	nums := []int{-1, 2, 1, -4}
	//	target := 1
	//	nums := []int{}
	//nums := []int{-541, -224, -517, -235, -268, -569, -485, 515, 642, -834, 769, 407, 193, 601, 950, 622, 286, -450, 561, -756, -576, -893, 558, 315, -305, -786, 154, -547, 516, -166, 772, -30, 401, -617, -392, -912, -959, 491, -864, -422, -298, 661, 966, 603, 698, -198, -856, -853, -909, 280, -652, 925, -824, -297, -755, 337, -990, 272, -897, 920, 964, -848, -810, -413, 159, -622, -675, -501, 843, 382, 235, 678, -430, -352, 904, 265, -46, 122, 44, 328, -775, -804, 409, -529, 886, 587, -609, 673, 12, -215, 466, -350, 110, 58, -831, -476, 553, -56, 927, 410, 984, 158, -196, -411, 15, -907, 598, 494, 586, -377, -16, 92, -750, 802, -401, 260, -903, -915, -839, -9, 230, 450, -4, 975, 479, 422, 181, 658, 55, 831, 916, 89, -464, 837, 388, 881, -604, -146, 314, 717, 455, -331, 78, -266, 121, 612, 737, -654, -643, -924, 386, 529, 846, 289, 97, 91, -254, 468, -612, 170, -343, 746, -435, 236, -866, 192, 366, -265, -549, -678, 893, 722, 924, -705, 83, 684, -544, 945, 929, 879, -860, 911, 106, 854, 390, 496, 695, -697, -8, -140, -159, 823, 674, -245, -862, -974, -125, 285, 827, -782, -921, 347, -759, -736, -703, -278, 868, 847, -898, 324, -520, -202, 860, 281, -554, -656, 59, -551, 634, 569, 777, 210, -381, -313, -250, -74, 580, -311, 233, -994, -951, 384, -850, -956, -317, 330, 392, 360, 514, 944, 928, 241, -390, -925, 897, 988, -684, 497, -481, 361, 112, 609, -102, 489, -535, -466, -680, -53, -574, 756, -999, -521, -480, 242, 204, -470, -412, -276, 641, 152, 816, -97, -5, 443, -500, -740, 999, -780, 968, 201, -687, 162, 830, 987, -208, -384, -391, -345, -937, -116, 877, -261, 579, -482, 563, -570, 397, 690, -497, -84, -216, 702, -694, 297, 379, -283, 336, 239, -39, 41, -771, -591, -946, 958, -742, -980, 738, -855, 109, 965, 478, 88, -78, -746, -982, 322, -828, -117, -653, 22, 922, -871, 135, 334, 37, -884, 565, 804, 461, 761, -916, 90, -403, 793, 838, -623, 105, 306, 923, -720, 655, -691, 539, 798, 960, -444, -303, -406, 910, 880, 507, -776, -460, -147, 472, 606, -230, 567, 202, 437, 776, -847, -557, -427, -658, 672, -895, 252, 198, 810, 686, -585, -185, 102, -407, 333, -715, -289, -699, -168, 275, -171, -404, 485, -968, -690, 268, -838, 398, -71, -210, -491, -829, 948, 182, -287, 715, -953, -76, -367, 255, -51, -183, 712, -306, -827, 209, -324, 583, 849, -176, 685, 499, -288, 616, 197, 77, -733, -731, -812, -356, 614, 357, 990, 436, -868, -509, -734, -451, -851, 421, -996, -662, 805, -676, -22, -599, -943, -919, 446, -164, 709, -519, -465, 292, 213, -787, 439, 611, 566, -398, 619, 290, -634, 108, 952, -749, -211, -923, 126, -118, 726, -63, -233, -291, 865, 787, -857, 625, -799, -764, 892, -478, -688, -429, 299, -127, -388, -967, -648, -970, 506, 557, 372, -913, -175, -419, -992, 266, -269, 123, -560, 724, -762, -402, -178, 66, -315, 320, -264, -273, -582, 46, 900, -160, -993, 540, 901, -191, 271, 931, 144, 367, 935, 441, -902, 27, -366, -369, 727, 758, -729, 184, -504, 136, -655, 65, 813, -205, -670, 628, 743, 626, 370, -710, 788, -376, -948, 364, 568, -586, 564, -20, -927, -452, 486, -854, 51, -189, 917, -593, 246, -323, -971, 63, -139, 708, 533, -522, -597, 773, 959, -420, 853, -150, -358, -873, -477, -443, 316, 647, -378, 156, -939, -109, -615, 480, 87, 167, -784, 442, -110, 53, 393, -495, 113, 64, -976, 368, 991, 887, 608, -320, -602, 1000, -674, 550, -108, 238, -3, 578, 124, -55, -639, 974, -737, 61, -374, 17, 762, 359, -603, 452, 527, -830, 890, 573, -282, -527, -886, -67, 822, -822, -70, -302, -663, 791, 985, 259, -580, -262, 651, -986, 211, -33, 757, 693, 82, 675, -336, 844, -997, 339, -199, -725, -231, 310, -1, -19, -559, 32, -625, -255, -772, -805, -179, 876, 323, 681, 146, 107, -769, -425, 294, -483, -726, -135, 340, -696, -707, -58, 498, 463, -214, -679, -380, -106, -206, 520, -86, -309, -362, -721, -767, -530, -91, 645, 659, 878, -562, 613, 789, -414, -122, -657, 203, -296, -745, 832, 680, -709, -154, -516, -935, -360, 806, 128, 309, 305, -910, 134, -797, 416, 957, -151, 237, 503, -794, 559, -100, -329, -918, -370, -496, -382, -783, 653, -760, -114, -220, -815, 117, 6, 894, 72, -840, -741, -698, 257, 526, 933, -326, 650, -628, -695, 224, -858, -280, 535, 552, 971, -436, 700, 249, -936, 517, 391, -10, -197, -738, -811, -488, 930, 125, -263, 493, 453, 254, -433, 633, 666, -456, -75, -765, -213, 913, -35, 335, -349, -605, 786, -295, 168, -636, -29, -155, 355, 934, 597, -223, -906, 73, -161, 169, 828, -595, -203, 638, 462, -552, -335, 748, 43, -368, -361, -163, 414, -397, -778, -753, 537, 85, -124, -293, -555, 308, 129, 274, -511, 706, 707, -405, -947, 253, -963, 570, -790, 796, 547}
	//target := -3979
	nums := []int{4, 0, 5, -5, 3, 3, 0, -4, -5}
	target := -2 //  -2
	//nums := []int{-593, 973, -526, 683, 538, -80, 292, 77, 145, 204, 464, -455, -536, -277, 7, 114, -837, 671, 420, -730, 111, 950, -778, -71, 644, -295, 876, 248, 689, 984, 509, -144, 449, 672, 791, 772, 592, -465, 242, 834, -690, -809, 510, -995, -316, -301, -405, 844, -577, -515, -689, 351, 566, -994, -765, -332, -528, 928, 756, 64, 958, 872, -84, 542, -679, -882, 670, -123, 577, 878, -736, -903, 771, 380, -154, 439, -510, 863, 11, 183, -922, -868, -370, 429, 417, 31, -914, 529, 200, 622, -479, -702, -613, -8, -589, -452, -222, 757, -669, -57, -587, -668, 988, 545, 704, -10, -750, -364, 557, 405, -283, -338, -286, -878, 460, -806, 156, -450, -700, -341, 597, 328, -502, 895, 168, 627, 221, 830, 910, 556, 208, -272, 851, 567, -42, 357, 10, -667, -352, 237, 873, -525, 552, -576, 558, 105, -413, 409, -196, -637, 55, 749, -929, 422, 341, -311, 471, -410, 991, 34, 138, 37, 926, -724, 939, 110, -870, 424, -175, 236, 839, -25, 570, -946, -654, 613, 933, 12, -805, 180, -468, -92, -52, -475, 539, 194, 499, -645, 435, 87, -518, 15, -747, -673, -976, -498, 608, -657, -592, -379, 452, 287, -210, -568, 307, 563, -37, -358, 896, 779, -600, -570, 112, 869, -39, 665, 716, -478, -139, -180, 911, -992, -913, 861, -291, 264, -718, -100, -467, 985, -169, -484, 562, -197, 821, -235, -830, 270, -31, 263, 291, 348, -511, -466, -193, -194, 962, 837, 945, 299, 163, 995, 190, -19, -436, 888, 367, 294, -386, 486, -202, 316, -221, 3, -626, -767, -534, 780, 283, -430, -947, 725, -858, 810, -282, -304, -119, -659, -890, -892, 56, -426, -65, 338, 265, -288, -12, -598, 189, 153, 427, 72, 431, 179, -764, 798, 333, 356, -422, 976, -148, 664, -862, -60, -184, -167, 154, 54, -431, 643, 540, -979, -875, -361, -829, 26, 104, -721, -172, -477, -780, 286, -267, 611, 850, 583, 24, -445, -618, 327, 39, -697, -228, 774, -64, 89, -398, 167, 133, -48, 951, 918, 568, 498, 586, 533, 295, -88, 454, -471, -755, 289, 591, 881, -249, 220, 477, 701, -168, -306, -53, -448, 734, -795, -588, -115, -298, 667, -114, 582, -399, -473, -954, -164, -300, 858, 604, -134, 207, 172, 97, 708, 76, -323, 804, 855, 537, 378, 877, 185, -665, -604, 285, -417, -110, 953, -265, 446, -908, 547, 90, 85, 227, -811, -66, 824, -397, 859, -781, -542, -831, 680, 27, -58, 685, 814, 852, -753, 84, 186, -44, -558, -634, 899, -6, -67, 100, 404, 315, -1000, -345, 469, -712, 479, 229, 366, -297, -54, 326, 472, -776, 594, 296, 69, -389, 396, -49, -264, 554, -722, 497, 700, 724, 581, -132, -620, 823, -34, -104, -279, -964, -742, 370, -156, -661, 252, -538, -190, -973, -797, 397, 585, 970, -980, -254, -918, -996, -945, 290, 231, 625, 275, -82, -457, -241, -416, -715, -560, 614, 635, 8, -233, 571, 829, 118, -650, 17, -143, -231, -564, 618, 730, 789, -802, 775, 727, 259, 676, 731, 795, -970, -292, -666, -192, 184, 893, -129, -535, -309, -791, -865, -789, -359, -63, -43, -508, 835, -887, 444, -128, 841, -893, 225, 1000, 251, 403, -944, -504, -274, -726, 818, 761, -597, 932, 817, -402, -583, 226, 359, 35, -388, -74, -460, -333, -610, -782, -219, -696, 508, 161, -420, -69, 549, -47, 765, -910, -856, -796, -741, 528, -911, -440, -869, -259, 760, 130, -368, -547, 428, -2, 202, 913, -601, 698, 941, 697, 660, -242, -79, 555, 652, 306, 741, -5, -95, 127, -545, -224, -902, -711, 710, -211, -270, -532, -3, -40, 70, 564, 0, -655, 770, 485, 511, 52, 5, -959, -81, 147, -35, -881, -733, 578, 132, -956, 989, -73, -355, -572, 811, -55, -833, 261, 729, -438, -209, -919, 371, -552, 253, -788, -343, 115, 375, -670, -896, -227, -815, 551, 38, -958, -503, 561, -509, 458, 754, 494, -337, 400, 384, -151, -276, 758, -935, 345, 19, -925, 481, 334, -239, 300, -965, -487, -432, 173, -810, 354, 423, -120, 74, -569, 349, 696, 782, 177, 188, 6, 587, -131, 938, -176, -113, 964, -162, 523, 318, 589, 143, 921, 20, -462, -713, 907, 28, -201, 638, -647, -841, 266, -439, -843, 313, -313, -103, 280, 364, 693, -491, 195, -906, 669, 796, 808, -90, 155, -894, -854, -646, 718, 109, -594, -108, -307, 140, 705, 182, -217, 980, -579, -551, 419, -330, 391, -325, -932, -855, -223, -846, -116, -891, 210, -9, -45, 385, -229, -447, 940, 916, 483, -371, -118, 381, -396, 600, 565, 362, -273, 880, -312, 146, -540, -566, 666, 408, 885, -801, -449, 330, -258, 448, -512, 75, 101, 994, 751, -253, 117, 176, 842, 576, -486, 903, -124, 232, 609, -533, 580, -27, 990, 632, 377, 541, 181, -94, -531, 645, 867, 536, -226, 833, 209, 621, -464, 33, 343, -912, 332, -501, -779, 712, -232, -99, -529, 517, 800, 166, -772, 389, 36, -75, 521, 308, -362, 260, 201, 942, 891, 548, 500, 715, 66, 373, -36, -615, -641, -218, 390, -153, -960, 919, -303, -26, -709, 897, -857, 170, 513, 650, -876, -245, -933, -373, 32, -940, 617, -962, -703, -15, 763, 678, 369, 352, 350, 819, -820, 661, 1, 206, -135, 898, 849, 679, -938, 157, -683, -553, -328, 845, -883, -948, 433, 407, 636, -177, -744, -347, 113, 870, -314, 831, 766, 588, 67, 60, -456, 317, 840, -921, -554, -102, -787, 569, -686, -136, -97, 447, -608, 917, 199, -198, 134, 695, 312, -674, -117}
	//target := 2260 // 2260
	//nums := []int{-1, 2, 1, -4}
	//target := 1 // 2
	//nums := []int{0, 0, 0}
	//target := 1 // 0
	//nums := []int{0, 1, 2}
	//target := 3 // 3

	//nums := []int{1, 1, -1}
	//target := 2 // 1
	tar := threeSumClosest(nums, target)
	fmt.Println(tar)

}

func threeSumClosest(nums []int, target int) int {
	mapList := make(map[int]int, len(nums))
	var findTarget, delta, numMax, posStart, numStart int
	firstTarget := true
	firstStart := false
	for _, num := range nums {
		mapList[num]++
		if numMax < num {
			numMax = num
		}
	}

	type key_value struct {
		key   int
		value int
	}

	var sorted_struct []key_value

	for key, value := range mapList {
		sorted_struct = append(sorted_struct, key_value{key, value})
	}

	sort.Slice(sorted_struct, func(i, j int) bool {
		return sorted_struct[i].key < sorted_struct[j].key
	})
	if target > 0 {
		if numMax < target {
			if numMax <= target/3 {
				posStart = len(sorted_struct) - 3
				if posStart < 0 {
					posStart = 0
				}
			} else {
				numStart = numMax / 3
				if numStart != 0 {
					firstStart = true
				}
			}
		}
	}

	for i := posStart; i <= len(sorted_struct)-1; i++ {
		k1 := sorted_struct[i]
		if firstStart && k1.key < numStart {
			continue
		}
		for j := i; j <= len(sorted_struct)-1; j++ {
			k2 := sorted_struct[j]
			if k2.key == k1.key && k1.value < 2 {
				continue
			}

			for k := j; k <= len(sorted_struct)-1; k++ {
				k3 := sorted_struct[k]
				if k3.key == k2.key && k2.key == k1.key && k1.value < 3 {
					continue
				}
				if k3.key == k2.key && k2.value < 2 {
					continue
				}

				sum := k1.key + k2.key + k3.key
				if firstTarget {
					findTarget = sum
					if findTarget >= target {
						delta = findTarget - target
					} else {
						delta = target - findTarget
					}
					firstTarget = false
				} else {
					var d int
					plus := true
					if sum >= target {
						d = sum - target
					} else {
						d = target - sum
						plus = false
					}
					if d < delta {
						delta = d
						findTarget = sum
					} else {
						if plus {
							break
						}
					}

				}

			}

		}
	}

	return findTarget
}
